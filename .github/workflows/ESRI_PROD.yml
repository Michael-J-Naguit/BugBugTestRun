name: Run BugBug - ESRI Production Suite

on:
  workflow_dispatch:
  schedule:
    - cron: '0 7 * * *'  # 5:00 PM Sydney (UTC+10)

jobs:
  run-bugbug-tests:
    runs-on: ubuntu-latest
    name: Run BugBug Tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run ESRI Production Suite
        id: run-bugbug-tests
        uses: bugbug-io/bugbug-github-action@v1.2.1
        continue-on-error: true
        with:
          apiToken: ${{ secrets.BUGBUG_API_TOKEN }}
          suiteId: 273bc3c9-0164-45aa-b440-d717edfeab27
          outputPath: test-results-${{ github.run_id }}.xml

      - name: Remove duplicate test cases from XML
        run: |
          python3 - <<EOF
          import xml.etree.ElementTree as ET
      
          file_path = "test-results-${{ github.run_id }}.xml"
          tree = ET.parse(file_path)
          root = tree.getroot()
      
          seen = set()
          for testsuite in root.findall("testsuite"):
              testcases = testsuite.findall("testcase")
              unique_cases = []
              for tc in testcases:
                  key = (tc.attrib.get("name"), tc.attrib.get("classname"))
                  if key not in seen:
                      seen.add(key)
                      unique_cases.append(tc)
              # Clear and repopulate testcases
              for tc in testcases:
                  testsuite.remove(tc)
              for tc in unique_cases:
                  testsuite.append(tc)
              # Update test count
              testsuite.set("tests", str(len(unique_cases)))
      
          tree.write(file_path, encoding="utf-8", xml_declaration=True)
          EOF
      
      - name: Getting Run Output
        run: |
          echo "Suite Run ID: ${{ steps.run-bugbug-tests.outputs.suiteRunId }}"

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: bugbug-test-results-${{ github.run_id }}
          path: test-results-${{ github.run_id }}.xml

      - name: Display Test Summary
        run: |
          set -e
          echo "### 📝 Test Summary" >> "$GITHUB_STEP_SUMMARY"
      
          FILE="test-results-${{ github.run_id }}.xml"
      
          if [ ! -f "$FILE" ]; then
            echo "❌ Test results file not found." >> "$GITHUB_STEP_SUMMARY"
            exit 1
          fi
      
          python3 - <<EOF > summary.tmp
          import xml.etree.ElementTree as ET
          
          tree = ET.parse("$FILE")
          root = tree.getroot()
          
          unique_cases = set()
          failures = 0
          errors = 0
          skipped = 0
          
          for testsuite in root.findall("testsuite"):
              for case in testsuite.findall("testcase"):
                  key = (case.attrib.get("name"), case.attrib.get("classname"))
                  if key not in unique_cases:
                      unique_cases.add(key)
                      if case.find("failure") is not None:
                          failures += 1
                      elif case.find("error") is not None:
                          errors += 1
                      elif case.find("skipped") is not None:
                          skipped += 1
          
          print(f"TOTAL={len(unique_cases)}")
          print(f"FAILURES={failures}")
          print(f"ERRORS={errors}")
          print(f"SKIPPED={skipped}")
          print("TESTCASES=")
          for name, classname in sorted(unique_cases):
              print(f"- {classname}")
          EOF
      
          # Read values into variables
          source summary.tmp
          rm summary.tmp
      
          echo "| Metric        | Count |" >> "$GITHUB_STEP_SUMMARY"
          echo "|--------------|-------|" >> "$GITHUB_STEP_SUMMARY"
          echo "| ✅ Total Tests  | ${TOTAL} |" >> "$GITHUB_STEP_SUMMARY"
          echo "| ❌ Failed Tests | ${FAILURES} |" >> "$GITHUB_STEP_SUMMARY"
          echo "| ⚠️ Errors       | ${ERRORS} |" >> "$GITHUB_STEP_SUMMARY"
          echo "| ⏭️ Skipped      | ${SKIPPED} |" >> "$GITHUB_STEP_SUMMARY"
      
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "### Test Cases" >> "$GITHUB_STEP_SUMMARY"
          echo "| Test Case |" >> "$GITHUB_STEP_SUMMARY"
          echo "|-----------|" >> "$GITHUB_STEP_SUMMARY"
      
          echo "$TESTCASES" | grep '^- ' | while read -r line; do
            TEST_NAME=$(echo "$line" | sed 's/^- //')
            ESCAPED_NAME=$(echo "$TEST_NAME" | sed 's/&amp;/\&/g' | sed 's/|/\\|/g')
            echo "| \`$ESCAPED_NAME\` |" >> "$GITHUB_STEP_SUMMARY"
          done
      
          echo "" >> "$GITHUB_STEP_SUMMARY"
          if [ "$FAILURES" -gt 0 ] || [ "$ERRORS" -gt 0 ]; then
            echo "⚠️ **Some tests failed!**" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "🎉 **All tests passed!**" >> "$GITHUB_STEP_SUMMARY"
          fi


      - name: Fail workflow if tests failed
        if: steps.run-bugbug-tests.outcome == 'failure'
        run: |
          echo "BugBug test suite failed, marking workflow as failed."
          exit 1
